generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Statuses {
  id           Int                             @id @default(autoincrement())
  code         String                          @unique
  name         String
  description  String?
  isActive     Boolean                         @default(true)
  createdAt    DateTime                        @default(now())
  updatedAt    DateTime                        @updatedAt
  applications FreshLicenseApplicationsForms[]
}

model Actiones {
  id                  Int                                             @id @default(autoincrement())
  code                String                                          @unique
  name                String
  description         String?
  isActive            Boolean                                         @default(true)
  createdAt           DateTime                                        @default(now())
  updatedAt           DateTime                                        @updatedAt
  applicationsHistory FreshLicenseApplicationsFormWorkflowHistories[] @relation("ActionesToWorkflowHistory")
}

model States {
  id              Int                                           @id @default(autoincrement())
  name            String                                        @unique
  districts       Districts[]
  addresses       FreshLicenseApplicationsFormAddresses[]
  occupationInfos FreshLicenseApplicationsFormOccupationInfos[]
  applications    FreshLicenseApplicationsForms[]
  users           Users[]                                       @relation("StateUsers")
}

model Districts {
  id              Int                                           @id @default(autoincrement())
  name            String                                        @unique
  stateId         Int
  state           States                                        @relation(fields: [stateId], references: [id])
  addresses       FreshLicenseApplicationsFormAddresses[]
  occupationInfos FreshLicenseApplicationsFormOccupationInfos[]
  applications    FreshLicenseApplicationsForms[]
  users           Users[]                                       @relation("DistrictUsers")
  zones           Zones[]
}

model Zones {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  districtId Int
  divisions  Divisions[]
  users      Users[]     @relation("ZoneUsers")
  district   Districts   @relation(fields: [districtId], references: [id])
}

model Divisions {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  zoneId   Int
  zone     Zones            @relation(fields: [zoneId], references: [id])
  stations PoliceStations[]
  users    Users[]          @relation("DivisionUsers")
}

model PoliceStations {
  id                    Int                                     @id @default(autoincrement())
  name                  String                                  @unique
  divisionId            Int
  division              Divisions                               @relation(fields: [divisionId], references: [id])
  users                 Users[]                                 @relation("PoliceStationUsers")
  addresses             FreshLicenseApplicationsFormAddresses[]
}

model Roles {
  id                         Int                             @id @default(autoincrement())
  code                       String                          @unique
  name                       String
  is_active                  Boolean                         @default(true)
  created_at                 DateTime                        @default(now())
  updated_at                 DateTime                        @updatedAt
  // Role configuration fields stored in DB
  dashboard_title            String?
  menu_items                 Json?
  permissions                Json?
  can_access_settings       Boolean                         @default(false)
  can_forward                Boolean                         @default(false)
  can_re_enquiry             Boolean                         @default(false)
  can_generate_ground_report Boolean                         @default(false)
  can_FLAF                   Boolean                         @default(false)
  can_create_freshLicence    Boolean                         @default(false)
  currentRoleApplications    FreshLicenseApplicationsForms[] @relation("CurrentRole")
  previousRoleApplications   FreshLicenseApplicationsForms[] @relation("PreviousRole")
  workflowHistoryPrevious    FreshLicenseApplicationsFormWorkflowHistories[] @relation("WorkflowPreviousRole")
  workflowHistoryNext        FreshLicenseApplicationsFormWorkflowHistories[] @relation("WorkflowNextRole")
  users                      Users[]
}

model FreshLicenseApplicationsFormCriminalHistories {
  id                       Int                             @id @default(autoincrement())
  applicationId            Int
  convicted                Boolean
  bondDate               DateTime?
  bondExecutionOrdered   Boolean?
  convictionData         Json?
  periodOfBond           String?
  prohibitedDate         DateTime?
  prohibitedUnderArmsAct Boolean?
  application            FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
}

model FreshLicenseApplicationsFormLicenseHistories {
  id                       Int                             @id @default(autoincrement())
  applicationId            Int
  createdAt                DateTime                        @default(now())
  familyMemberHasArmsLicense Boolean
  familyMemberLicenses       Json?
  hasAppliedBefore           Boolean
  hasOtherApplications       Boolean
  hasSafePlaceForArms        Boolean
  hasUndergoneTraining       Boolean
  otherApplications          Json?
  previousApplications       Json?
  safeStorageDetails         String?
  trainingDetails            String?
  updatedAt                  DateTime                      @updatedAt
  application                FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
}

model WeaponTypeMaster {
  id              Int                             @id @default(autoincrement())
  name            String                                              @unique
  description     String?
  imageUrl        String?
  licenseRequests FreshLicenseApplicationsFormLicenseRequestDetails[] @relation("RequestedWeapons")
}

model FreshLicenseApplicationsFormLicenseRequestDetails {
  id               Int                             @id @default(autoincrement())
  needForLicense   LicensePurpose?
  weaponCategory   WeaponCategory?
  areaOfValidity   String?
  applicationId    Int
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  application      FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
  requestedWeapons WeaponTypeMaster[]            @relation("RequestedWeapons")
}

model FreshLicenseApplicationsFormFileUploads {
   id           Int                             @id @default(autoincrement())
  applicationId Int
  fileType      FileType
  fileUrl       String
  uploadedAt    DateTime                      @default(now())
  fileName      String
  fileSize      Int
  application   FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
}

model Users {
  id                       Int                             @id @default(autoincrement())
  username                 String                          
  email                    String?                         @unique
  password                 String
  createdAt                DateTime                        @default(now())
  updatedAt                DateTime                        @updatedAt
  phoneNo                  String?                         @unique
  roleId                   Int
  policeStationId          Int?
  stateId                  Int?
  districtId               Int?
  zoneId                   Int?
  divisionId               Int?
  actionsFrom              ActionHistories[]               @relation("ActionFromUser")
  actionsTo                ActionHistories[]               @relation("ActionToUser")
  flowMaps                 FlowMaps[]
  nextUserInFlows          FlowNextUsers[]                 @relation("NextUserInFlow")
  currentUserApplications  FreshLicenseApplicationsForms[] @relation("ActionFromUser")
  previousUserApplications FreshLicenseApplicationsForms[] @relation("ActionToUser")
  workflowHistoryPrevious  FreshLicenseApplicationsFormWorkflowHistories[] @relation("WorkflowPreviousUser")
  workflowHistoryNext      FreshLicenseApplicationsFormWorkflowHistories[] @relation("WorkflowNextUser")
  district                 Districts?                      @relation("DistrictUsers", fields: [districtId], references: [id])
  division                 Divisions?                      @relation("DivisionUsers", fields: [divisionId], references: [id])
  policeStation            PoliceStations?                 @relation("PoliceStationUsers", fields: [policeStationId], references: [id])
  role                     Roles                           @relation(fields: [roleId], references: [id])
  state                    States?                         @relation("StateUsers", fields: [stateId], references: [id])
  zone                     Zones?                          @relation("ZoneUsers", fields: [zoneId], references: [id])
}

model FlowMaps {
  id            Int               @id @default(autoincrement())
  currentUserId Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  actions       ActionHistories[]
  currentUser   Users             @relation(fields: [currentUserId], references: [id])
  nextUsers     FlowNextUsers[]
}

model FlowNextUsers {
   id        Int        @id @default(autoincrement())
  flowMapId  Int
  nextUserId Int
  flowMap    FlowMaps @relation(fields: [flowMapId], references: [id])
  nextUser   Users    @relation("NextUserInFlow", fields: [nextUserId], references: [id])
}

model ActionHistories {
  id          Int      @id @default(autoincrement())
  flowMapId   Int
  fromUserId  Int
  toUserId    Int
  actionTaken String
  createdAt   DateTime @default(now())
  flowMap     FlowMaps @relation(fields: [flowMapId], references: [id])
  fromUser    Users    @relation("ActionFromUser", fields: [fromUserId], references: [id])
  toUser      Users    @relation("ActionToUser", fields: [toUserId], references: [id])
}

model FreshLicenseApplicationsFormAddresses {
  id                    Int                             @id @default(autoincrement())
  addressLine           String
  stateId               Int
  districtId            Int
  policeStationId       Int
  sinceResiding         DateTime
  district              Districts                       @relation(fields: [districtId], references: [id])
  state                 States                          @relation(fields: [stateId], references: [id])
  policeStation         PoliceStations                   @relation(fields: [policeStationId], references: [id])
  permanentApplications FreshLicenseApplicationsForms[] @relation("PermanentAddress")
  presentApplications   FreshLicenseApplicationsForms[] @relation("PresentAddress")
}

model FreshLicenseApplicationsFormContactInfos {
  id                 Int                            @id @default(autoincrement())
  telephoneOffice    String?
  telephoneResidence String?
  mobileNumber       String
  officeMobileNumber String?
  alternativeMobile  String?
  applicationId      Int?                           @unique
  application        FreshLicenseApplicationsForms?
}

model FreshLicenseApplicationsFormOccupationInfos {
  id                   Int                             @id @default(autoincrement())
  occupation           String
  officeAddress        String
  stateId              Int
  districtId           Int
  cropLocation         String?
  areaUnderCultivation Float?
  district             Districts                       @relation(fields: [districtId], references: [id])
  state                States                          @relation(fields: [stateId], references: [id])
  applications         FreshLicenseApplicationsForms[]
}

model FreshLicenseApplicationsFormBiometricDatas {
  id                Int                            @id @default(autoincrement())
  signatureImageUrl String?
  irisScanImageUrl  String?
  photoImageUrl     String?
  applicationId     Int                            @unique
  application       FreshLicenseApplicationsForms?
}

model FreshLicenseApplicationsForms {
  id                                            Int                            @id @default(autoincrement())
  acknowledgementNo                             String                                              @unique
  firstName                                     String
  middleName                                    String?
  lastName                                      String
  filledBy                                      String?
  parentOrSpouseName                            String
  sex                                           Sex
  placeOfBirth                                  String
  dateOfBirth                                   DateTime
  panNumber                                     String?
  aadharNumber                                  String                                              @unique
  dobInWords                                    String?
  presentAddressId                              Int
  permanentAddressId                            Int?
  contactInfoId                                 Int                                                 @unique
  occupationInfoId                              Int?
  biometricDataId                               Int?                                                @unique
  statusId                                      Int?
  currentRoleId                                 Int?
  previousRoleId                                Int?
  currentUserId                                 Int?
  previousUserId                                Int?
  createdAt                                     DateTime                                            @default(now())
  stateId                                       Int
  districtId                                    Int
  updatedAt                                     DateTime                                            @default(now()) @updatedAt
  isApprovied                                   Boolean                                             @default(false)
  isFLAFGenerated                               Boolean                                             @default(false)
  isGroundReportGenerated                       Boolean                                             @default(false)
  isPending                                     Boolean                                             @default(false)
  isReEnquiry                                   Boolean                                             @default(false)
  isReEnquiryDone                               Boolean                                             @default(false)
  isRejected                                    Boolean                                             @default(false)
  remarks                                       String?
  criminalHistory                               FreshLicenseApplicationsFormCriminalHistories[]
  fileUploads                                   FreshLicenseApplicationsFormFileUploads[]
  licenseHistory                                FreshLicenseApplicationsFormLicenseHistories[]
  licenseDetails                                FreshLicenseApplicationsFormLicenseRequestDetails[]
  FreshLicenseApplicationsFormWorkflowHistories FreshLicenseApplicationsFormWorkflowHistories[]
  biometricData                                 FreshLicenseApplicationsFormBiometricDatas?         @relation(fields: [biometricDataId], references: [id])
  contactInfo                                   FreshLicenseApplicationsFormContactInfos            @relation(fields: [contactInfoId], references: [id])
  currentRole                                   Roles?                                              @relation("CurrentRole", fields: [currentRoleId], references: [id])
  currentUser                                   Users?                                              @relation("ActionFromUser", fields: [currentUserId], references: [id])
  district                                      Districts                                           @relation(fields: [districtId], references: [id])
  occupationInfo                                FreshLicenseApplicationsFormOccupationInfos?        @relation(fields: [occupationInfoId], references: [id])
  permanentAddress                              FreshLicenseApplicationsFormAddresses?              @relation("PermanentAddress", fields: [permanentAddressId], references: [id])
  presentAddress                                FreshLicenseApplicationsFormAddresses               @relation("PresentAddress", fields: [presentAddressId], references: [id])
  previousRole                                  Roles?                                              @relation("PreviousRole", fields: [previousRoleId], references: [id])
  previousUser                                  Users?                                              @relation("ActionToUser", fields: [previousUserId], references: [id])
  state                                         States                                              @relation(fields: [stateId], references: [id])
  status                                        Statuses?                                           @relation(fields: [statusId], references: [id])
}

model FreshLicenseApplicationsFormWorkflowHistories {
  id             Int                            @id @default(autoincrement())
  applicationId  Int
  previousUserId Int
  nextUserId     Int
  actionTaken    String
  remarks        String?
  createdAt      DateTime                      @default(now())
  previousRoleId Int?
  nextRoleId     Int?
  actionesId     Int?
  attachments    Json?
  actiones       Actiones?                     @relation("ActionesToWorkflowHistory", fields: [actionesId], references: [id])
  application    FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
  previousUser   Users                         @relation("WorkflowPreviousUser", fields: [previousUserId], references: [id])
  nextUser       Users                         @relation("WorkflowNextUser", fields: [nextUserId], references: [id])
  previousRole   Roles?                        @relation("WorkflowPreviousRole", fields: [previousRoleId], references: [id])
  nextRole       Roles?                        @relation("WorkflowNextRole", fields: [nextRoleId], references: [id])
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum ArmsCategory {
  RESTRICTED
  PERMISSIBLE
}

enum AreaOfUse {
  DISTRICT
  STATE
  INDIA
}

enum previousStatusOfLicence {
  APPROVED
  PENDING
  REJECTED
}

enum FileType {
  AADHAR_CARD
  PAN_CARD
  TRAINING_CERTIFICATE
  OTHER_STATE_LICENSE
  EXISTING_LICENSE
  SAFE_CUSTODY
  MEDICAL_REPORT
  OTHER
}

enum LicensePurpose {
  SELF_PROTECTION
  SPORTS
  HEIRLOOM_POLICY
}

enum WeaponCategory {
  RESTRICTED
  PERMISSIBLE
}
