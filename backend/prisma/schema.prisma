generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- Enums ----------------
enum Sex {
  MALE
  FEMALE
  OTHER
}

enum ArmsCategory {
  RESTRICTED
  PERMISSIBLE
}

enum AreaOfUse {
  DISTRICT
  STATE
  INDIA
}

enum previousStatusOfLicence {
  APPROVED
  PENDING
  REJECTED
}

enum FileType {
  AADHAR_CARD
  PAN_CARD
  TRAINING_CERTIFICATE
  OTHER_STATE_LICENSE
  EXISTING_LICENSE
  SAFE_CUSTODY
  MEDICAL_REPORT
  OTHER
}

enum LicensePurpose {
  SELF_PROTECTION
  SPORTS
  HEIRLOOM_POLICY
}

enum WeaponCategory {
  RESTRICTED
  PERMISSIBLE
}

model Statuses {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  name            String
  description     String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  applications    FreshLicenseApplicationsForms[]
  actions         Actiones[]
}

model Actiones {
  id             Int      @id @default(autoincrement())
  code            String   @unique
  name            String
  description     String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  statusId        Int
  status          Statuses @relation(fields: [statusId], references: [id])

  applicationsHistory  FreshLicenseApplicationsFormWorkflowHistories[] @relation("ActionesToWorkflowHistory")
}
model States {
  id              Int                      @id @default(autoincrement())
  name            String                   @unique
  districts       Districts[]
  users           Users[]                   @relation("StateUsers")
  addresses       FreshLicenseApplicationsFormAddresses[]
  occupationInfos FreshLicenseApplicationsFormOccupationInfos[]
  applications    FreshLicenseApplicationsForms[]
}
model Districts {
  id              Int                      @id @default(autoincrement())
  name            String                   @unique
  state           States                    @relation(fields: [stateId], references: [id])
  stateId         Int
  zones           Zones[]
  users           Users[]                   @relation("DistrictUsers")
  addresses       FreshLicenseApplicationsFormAddresses[]
  occupationInfos FreshLicenseApplicationsFormOccupationInfos[]
  applications    FreshLicenseApplicationsForms[]
}

model Zones {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  district   Districts   @relation(fields: [districtId], references: [id])
  districtId Int
  divisions  Divisions[]
  users      Users[]     @relation("ZoneUsers")
}

model Divisions {
  id       Int             @id @default(autoincrement())
  name     String          @unique
  zone     Zones            @relation(fields: [zoneId], references: [id])
  zoneId   Int
  stations PoliceStations[]
  users    Users[]          @relation("DivisionUsers")
}

model PoliceStations {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  division   Divisions @relation(fields: [divisionId], references: [id])
  divisionId Int
  users      Users[]   @relation("PoliceStationUsers")
  jurisdictionAddresses FreshLicenseApplicationsFormAddresses[] @relation("JurisdictionStation")
}

model Roles {
  id              Int              @id @default(autoincrement())
  code            String           @unique
  name            String
  is_active       Boolean          @default(true)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  can_forward    Boolean          @default(false)
  can_re_enquiry Boolean          @default(false)
  can_generate_ground_report Boolean   @default(false)
  can_FLAF Boolean          @default(false) // Fresh License Application Form
  users           Users[]
  currentRoleApplications FreshLicenseApplicationsForms[] @relation("CurrentRole")
  previousRoleApplications FreshLicenseApplicationsForms[] @relation("PreviousRole")
}

model FreshLicenseApplicationsFormCriminalHistories {
  id             Int    @id @default(autoincrement())
  applicationId  Int
  convicted      Boolean
  convictionData Json? // FIR number , Uder Section, Police Station, Unit, District, state, Offence, Sentence, Date of Sentence(date format)
  bondExecutionOrdered  Boolean?
  bondDate  DateTime?
  periodOfBond String? // e.g., "2 years", Period for which bound 
  prohibitedUnderArmsAct  Boolean?
  prohibitedDate DateTime?
  application FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
}

model FreshLicenseApplicationsFormLicenseHistories {
  id                             Int   @id @default(autoincrement())

  applicationId                  Int
  // (a) Previous application info
  hasAppliedBefore               Boolean
  previousApplications           Json?   // Array of previous application details

  // (b) Any other application (no question content given, so assume similar)
  hasOtherApplications           Boolean
  otherApplications              Json?   // Optional reason + authority

  // (c) Family member license details
  familyMemberHasArmsLicense     Boolean
  familyMemberLicenses           Json?   // Array of license holders

  // (d) Safe storage
  hasSafePlaceForArms            Boolean
  safeStorageDetails             String?

  // (e) Rule 10 training
  hasUndergoneTraining           Boolean
  trainingDetails                String?

  application FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
}

model WeaponTypeMaster {
  id          Int   @id @default(autoincrement())
  name        String   @unique     // e.g., "Rifle"
  description String?
  imageUrl    String?     // S3 or local image URL

  // Relation to license requests (many-to-many)
  licenseRequests FreshLicenseApplicationsFormLicenseRequestDetails[] @relation("RequestedWeapons")
}

model FreshLicenseApplicationsFormLicenseRequestDetails {
  id                     Int   @id @default(autoincrement())

  // 15. Need for license
  needForLicense       LicensePurpose?  // Uses enum

  // 16 a. Weapon type
  weaponCategory         WeaponCategory? // "restricted" | "permissible"
  // Many-to-many with WeaponTypeMaster
  requestedWeapons WeaponTypeMaster[] @relation("RequestedWeapons")

  // 17. Area to carry arms
  areaOfValidity         String? // "District" | "State" | "Throughout India", address of zs

  applicationId          Int
  application FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model FreshLicenseApplicationsFormFileUploads {
  id            Int   @id @default(autoincrement())
  applicationId Int
  fileName      String
  fileSize      Int
  fileType      FileType
  fileUrl       String
  uploadedAt    DateTime @default(now())

  application FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
}

model Users {
  id        Int   @id @default(autoincrement())
  username  String   @unique
  email     String?  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phoneNo String? @unique

  roleId Int
  role   Roles @relation(fields: [roleId], references: [id])

  policeStationId Int?
  policeStation   PoliceStations? @relation("PoliceStationUsers", fields: [policeStationId], references: [id])

  stateId Int?
  state   States? @relation("StateUsers", fields: [stateId], references: [id])

  districtId Int?
  district   Districts? @relation("DistrictUsers", fields: [districtId], references: [id])

  zoneId Int?
  zone   Zones? @relation("ZoneUsers", fields: [zoneId], references: [id])

  divisionId Int?
  division   Divisions? @relation("DivisionUsers", fields: [divisionId], references: [id])

  actionsFrom ActionHistories[] @relation("ActionFromUser")
  actionsTo   ActionHistories[] @relation("ActionToUser")
  currentUserApplications FreshLicenseApplicationsForms[] @relation("ActionFromUser")
  previousUserApplications FreshLicenseApplicationsForms[] @relation("ActionToUser")

  flowMaps        FlowMaps[]
  nextUserInFlows FlowNextUsers[] @relation("NextUserInFlow")
}

model FlowMaps {
  id            Int          @id @default(autoincrement())
  currentUserId Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  actions       ActionHistories[]
  currentUser   Users            @relation(fields: [currentUserId], references: [id])
  nextUsers     FlowNextUsers[]
}

model FlowNextUsers {
  id         Int  @id @default(autoincrement())
  flowMapId  Int
  nextUserId Int
  flowMap    FlowMaps @relation(fields: [flowMapId], references: [id])
  nextUser   Users    @relation("NextUserInFlow", fields: [nextUserId], references: [id])
}

model ActionHistories {
  id          Int   @id @default(autoincrement())
  flowMapId   Int
  fromUserId  Int
  toUserId    Int
  actionTaken String
  createdAt   DateTime @default(now())
  flowMap     FlowMaps  @relation(fields: [flowMapId], references: [id])
  fromUser    Users     @relation("ActionFromUser", fields: [fromUserId], references: [id])
  toUser      Users     @relation("ActionToUser", fields: [toUserId], references: [id])
}

model FreshLicenseApplicationsFormAddresses {
  id                  Int   @id @default(autoincrement())
  addressLine         String
  stateId             Int
  districtId          Int
  sinceResiding       DateTime
  jurisdictionStationId Int

  state    States    @relation(fields: [stateId], references: [id])
  district Districts @relation(fields: [districtId], references: [id])
  jurisdictionStation PoliceStations? @relation("JurisdictionStation", fields: [jurisdictionStationId], references: [id])

  presentApplications   FreshLicenseApplicationsForms[] @relation("PresentAddress")
  permanentApplications FreshLicenseApplicationsForms[] @relation("PermanentAddress")
}

model FreshLicenseApplicationsFormContactInfos {
  id                 Int                  @id @default(autoincrement())
  telephoneOffice    String?
  telephoneResidence String?
  mobileNumber       String
  officeMobileNumber String?
  alternativeMobile  String?
  applicationId      Int?   @unique
  application        FreshLicenseApplicationsForms?
}

model FreshLicenseApplicationsFormOccupationInfos {
  id                     Int  @id @default(autoincrement())
  occupation             String
  officeAddress          String
  stateId                Int
  districtId             Int
  // cropProtectionRequired Boolean @default(false)
  cropLocation           String?
  areaUnderCultivation   Float? // Acres/hectares, clarify in frontend

  state    States    @relation(fields: [stateId], references: [id])
  district Districts @relation(fields: [districtId], references: [id])

  applications FreshLicenseApplicationsForms[]
}

model FreshLicenseApplicationsFormBiometricDatas {
  id                Int                  @id @default(autoincrement())
  signatureImageUrl String?
  irisScanImageUrl  String?
  photoImageUrl     String?
  applicationId      Int   @unique
  application       FreshLicenseApplicationsForms?
}

// ---------------- Application schema ----------------
model FreshLicenseApplicationsForms {
  id                Int @id @default(autoincrement())
  acknowledgementNo String @unique

  firstName          String
  middleName         String?
  lastName           String
  filledBy           String? // Application filled by (zs name)
  parentOrSpouseName String
  sex                Sex

  statusId   Int?    // Foreign key to Status table
  currentRoleId Int? // Foreign key to Role table
  previousRoleId Int? // Foreign key to Role table
  currentUserId   Int? // Foreign key to User table
  previousUserId  Int? // Foreign key to User table
  stateId    Int
  districtId Int

  isApprovied        Boolean @default(false)
  isRejected         Boolean @default(false)
  isPending          Boolean @default(false)
  isReEnquiry        Boolean @default(false)
  isReEnquiryDone   Boolean @default(false) // If re-enquiry is done
  isGroundReportGenerated Boolean @default(false) // If ground report is generated
  isFLAFGenerated   Boolean @default(false) // If FLAF is generated

  placeOfBirth       String
  dateOfBirth        DateTime

  panNumber          String?
  aadharNumber       String   @unique
  dobInWords         String?     

  presentAddressId   Int
  permanentAddressId Int?
  contactInfoId      Int  @unique
  occupationInfoId   Int?
  biometricDataId    Int? @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // Relations
  status        Statuses?         @relation(fields: [statusId], references: [id])
  currentRole   Roles?   @relation("CurrentRole", fields: [currentRoleId], references: [id])
  previousRole  Roles?   @relation("PreviousRole", fields: [previousRoleId], references: [id])
  currentUser   Users?   @relation("ActionFromUser", fields: [currentUserId], references: [id])
  previousUser  Users?   @relation("ActionToUser", fields: [previousUserId], references: [id])

  presentAddress   FreshLicenseApplicationsFormAddresses         @relation("PresentAddress", fields: [presentAddressId], references: [id])
  permanentAddress FreshLicenseApplicationsFormAddresses?        @relation("PermanentAddress", fields: [permanentAddressId], references: [id])
  contactInfo      FreshLicenseApplicationsFormContactInfos     @relation(fields: [contactInfoId], references: [id])
  occupationInfo   FreshLicenseApplicationsFormOccupationInfos? @relation(fields: [occupationInfoId], references: [id])

  criminalHistory FreshLicenseApplicationsFormCriminalHistories[]
  licenseHistory  FreshLicenseApplicationsFormLicenseHistories[]

  licenseDetails FreshLicenseApplicationsFormLicenseRequestDetails[]


  fileUploads     FreshLicenseApplicationsFormFileUploads[]
  biometricData    FreshLicenseApplicationsFormBiometricDatas?  @relation(fields: [biometricDataId], references: [id])

  remarks          String?

  state    States    @relation(fields: [stateId], references: [id])
  district Districts @relation(fields: [districtId], references: [id])

  FreshLicenseApplicationsFormWorkflowHistories FreshLicenseApplicationsFormWorkflowHistories[]
}

model FreshLicenseApplicationsFormWorkflowHistories {
  id               Int   @id @default(autoincrement())
  applicationId    Int
  previousUserId   Int
  nextUserId       Int
  previousRoleId   Int?
  nextRoleId       Int?
  actionTaken      String   // enum recommended
  remarks          String?
  createdAt        DateTime @default(now())

  attachments      Json?    // Array of { name, type, contentType, url }

  actionesId       Int?
  actiones         Actiones? @relation("ActionesToWorkflowHistory", fields: [actionesId], references: [id])

  application      FreshLicenseApplicationsForms @relation(fields: [applicationId], references: [id])
  // ... other relations if needed
}
