service: serverless-postgres

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    DB_USER: ${env:DB_USER}
    DB_NAME: ${env:DB_NAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_HOST: ${self:custom.dbHost}
    DB_PORT: 5432

custom:
  dbHost: ${ssm:/your-service-name/dev/db-host} # Using SSM Parameter Store for DB Host

resources:
  Resources:
    PostgresDB:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.t2.micro
        Engine: postgres
        MasterUsername: ${env:DB_USER}
        MasterUserPassword: ${env:DB_PASSWORD}
        DBName: ${env:DB_NAME}
        AllocatedStorage: '20'
        VPCSecurityGroups:
          - !GetAtt MySecurityGroup.GroupId

    MySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable Postgres access
        VpcId: YOUR_VPC_ID # Replace with your VPC ID
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0 # Change this to restrict access

functions:
  createUser:
    handler: handler.createUser
    events:
      - http:
          path: users
          method: post

plugins:
  - serverless-aws-alias # Optional for managing multiple stages